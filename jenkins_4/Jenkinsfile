pipeline {
    agent any

    parameters {
        choice(
            name: 'ENV',
            choices: ['dev', 'prod'],
            description: '–í—ã–±–µ—Ä–∏—Ç–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –¥–µ–ø–ª–æ—è'
        )
    }

    stages {
        stage('Prepare') {
            steps {
                echo "üöÄ Deploying to ${params.ENV}"
                cleanWs()  // –û—á–∏—Å—Ç–∫–∞ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            }
        }

        stage('Copy Files via SSH') {
            steps {
                script {
                    def remoteServer = (params.ENV == 'prod') ? 'prod-server' : 'dev-server'
                    sshPublisher(
                        publishers: [
                            sshPublisherDesc(
                                configName: remoteServer,
                                transfers: [
                                    sshTransfer(
                                        sourceFiles: '**/*',  // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
                                        removePrefix: '',      // –ù–µ –æ–±—Ä–µ–∑–∞–µ–º –ø—É—Ç–∏
                                        remoteDirectory: '/var/www/app',  // –¶–µ–ª–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
                                        execCommand: 'sudo systemctl restart app.service'  // –ö–æ–º–∞–Ω–¥–∞ –ø–æ—Å–ª–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
                                    )
                                ]
                            )
                        ]
                    )
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –≤ ${params.ENV}"
        }
        failure {
            echo "‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è –≤ ${params.ENV}"
        }
    }
}
